import * as assert from 'assert';
import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs';
import { WorkspaceSettingsService, WorkspaceSettings } from '../../services/workspaceSettingsService';

/**
 * Integration test for the specific workspace settings bug scenario:
 * 1. Create workspace settings
 * 2. Alter emoji at workspace level
 * 3. Verify UI doesn't reset and settings save to workspace file (not global)
 */
suite('Workspace Settings Bug Integration Test', () => {
    let testWorkspaceDir: string;
    let originalGlobalConfig: any;

    setup(async () => {
        testWorkspaceDir = path.join(__dirname, '..', '..', '..', 'test-workspace-integration');
        
        // Create test workspace directory
        if (!fs.existsSync(testWorkspaceDir)) {
            fs.mkdirSync(testWorkspaceDir, { recursive: true });
        }

        // Backup original global configuration
        const config = vscode.workspace.getConfiguration('codeCounter');
        originalGlobalConfig = {
            emojis: {
                normal: config.get('emojis.normal'),
                warning: config.get('emojis.warning'),
                danger: config.get('emojis.danger')
            },
            lineThresholds: {
                warning: config.get('lineThresholds.midThreshold'),
                danger: config.get('lineThresholds.highThreshold')
            }
        };
    });

    teardown(async () => {
        // Clean up test workspace
        if (fs.existsSync(testWorkspaceDir)) {
            fs.rmSync(testWorkspaceDir, { recursive: true, force: true });
        }

        // Restore original configuration
        const config = vscode.workspace.getConfiguration('codeCounter');
        if (originalGlobalConfig.emojis) {
            if (originalGlobalConfig.emojis.normal !== undefined) {
                await config.update('emojis.normal', originalGlobalConfig.emojis.normal, vscode.ConfigurationTarget.Global);
            }
            if (originalGlobalConfig.emojis.warning !== undefined) {
                await config.update('emojis.warning', originalGlobalConfig.emojis.warning, vscode.ConfigurationTarget.Global);
            }
            if (originalGlobalConfig.emojis.danger !== undefined) {
                await config.update('emojis.danger', originalGlobalConfig.emojis.danger, vscode.ConfigurationTarget.Global);
            }
        }
        if (originalGlobalConfig.lineThresholds) {
            if (originalGlobalConfig.lineThresholds.warning !== undefined) {
                await config.update('lineThresholds.midThreshold', originalGlobalConfig.lineThresholds.warning, vscode.ConfigurationTarget.Global);
            }
            if (originalGlobalConfig.lineThresholds.danger !== undefined) {
                await config.update('lineThresholds.highThreshold', originalGlobalConfig.lineThresholds.danger, vscode.ConfigurationTarget.Global);
            }
        }
    });

    test('should save workspace emoji changes to workspace file and preserve context', async () => {
        // Step 1: Set up distinct global configuration (update individual properties)
        const globalConfig = vscode.workspace.getConfiguration('codeCounter');
        await globalConfig.update('emojis.normal', 'ðŸŸ¢', vscode.ConfigurationTarget.Global);
        await globalConfig.update('emojis.warning', 'ðŸŸ¡', vscode.ConfigurationTarget.Global);
        await globalConfig.update('emojis.danger', 'ðŸ”´', vscode.ConfigurationTarget.Global);

        // Step 2: Create workspace settings file with different emojis
        const workspaceService = new WorkspaceSettingsService(testWorkspaceDir);
        const workspaceSettingsPath = path.join(testWorkspaceDir, '.code-counter.json');
        
        const initialWorkspaceSettings: WorkspaceSettings = {
            emojis: {
                normal: 'ðŸ”µ',    // Workspace: blue circle 
                warning: 'ðŸŸ ',   // Workspace: orange circle
                danger: 'ðŸŸ£'     // Workspace: purple circle
            },
            lineThresholds: {
                warning: 150,    // Different from default
                danger: 600      // Different from default
            }
        };
        
        await workspaceService.saveWorkspaceSettings(testWorkspaceDir, initialWorkspaceSettings);

        // Verify initial workspace file exists with correct values
        assert.ok(fs.existsSync(workspaceSettingsPath), 'Workspace settings file should exist');
        const initialFileContent = JSON.parse(fs.readFileSync(workspaceSettingsPath, 'utf8'));
        assert.strictEqual(initialFileContent.emojis.normal, 'ðŸ”µ', 'Initial workspace emoji should be blue');

        // Step 3: Simulate changing an emoji at workspace level (mimicking UI behavior)
        // This simulates what happens when user clicks on emoji in workspace mode
        const existingSettings = JSON.parse(fs.readFileSync(workspaceSettingsPath, 'utf8'));
        const updatedSettings: WorkspaceSettings = {
            ...existingSettings,
            emojis: {
                ...existingSettings.emojis,
                normal: 'âš«'  // Change from blue to black circle
            }
        };
        
        await workspaceService.saveWorkspaceSettings(testWorkspaceDir, updatedSettings);

        // Step 4: Verify workspace file was updated (not global settings)
        const updatedFileContent = JSON.parse(fs.readFileSync(workspaceSettingsPath, 'utf8'));
        assert.strictEqual(updatedFileContent.emojis.normal, 'âš«', 'Workspace emoji should be updated to black');
        
        // Verify other workspace settings are preserved
        assert.strictEqual(updatedFileContent.emojis.warning, 'ðŸŸ ', 'Other workspace emojis should be preserved');
        assert.strictEqual(updatedFileContent.emojis.danger, 'ðŸŸ£', 'Other workspace emojis should be preserved');
        assert.strictEqual(updatedFileContent.lineThresholds.warning, 150, 'Workspace thresholds should be preserved');
        assert.strictEqual(updatedFileContent.lineThresholds.danger, 600, 'Workspace thresholds should be preserved');

        // Step 5: Verify global settings were NOT changed
        const currentGlobalEmojis = {
            normal: vscode.workspace.getConfiguration('codeCounter').get('emojis.normal'),
            warning: vscode.workspace.getConfiguration('codeCounter').get('emojis.warning'),
            danger: vscode.workspace.getConfiguration('codeCounter').get('emojis.danger')
        };
        assert.deepStrictEqual(currentGlobalEmojis, {
            normal: 'ðŸŸ¢',
            warning: 'ðŸŸ¡', 
            danger: 'ðŸ”´'
        }, 'Global settings should remain unchanged');

        // Step 6: Verify resolved settings show correct hierarchy (workspace overrides global)
        const resolvedSettings = await workspaceService.getResolvedSettings(testWorkspaceDir);
        assert.strictEqual(resolvedSettings.emojis.normal, 'âš«', 'Resolved settings should use updated workspace emoji');
        assert.strictEqual(resolvedSettings.emojis.warning, 'ðŸŸ ', 'Resolved settings should use workspace emoji');
        assert.strictEqual(resolvedSettings.emojis.danger, 'ðŸŸ£', 'Resolved settings should use workspace emoji');
        assert.strictEqual(resolvedSettings.lineThresholds.warning, 150, 'Resolved settings should use workspace threshold');
        assert.strictEqual(resolvedSettings.lineThresholds.danger, 600, 'Resolved settings should use workspace threshold');
    });

    test('should handle multiple consecutive workspace changes without context loss', async () => {
        // Set up workspace
        const workspaceService = new WorkspaceSettingsService(testWorkspaceDir);
        const workspaceSettingsPath = path.join(testWorkspaceDir, '.code-counter.json');
        
        const initialSettings: WorkspaceSettings = {
            emojis: {
                normal: 'ðŸ”µ',
                warning: 'ðŸŸ ',
                danger: 'ðŸŸ£'
            }
        };
        
        await workspaceService.saveWorkspaceSettings(testWorkspaceDir, initialSettings);

        // Simulate multiple rapid changes (as user would do)
        // Change 1: Update normal emoji
        let currentSettings = JSON.parse(fs.readFileSync(workspaceSettingsPath, 'utf8'));
        currentSettings = {
            ...currentSettings,
            emojis: {
                ...currentSettings.emojis,
                normal: 'âš«'
            }
        };
        await workspaceService.saveWorkspaceSettings(testWorkspaceDir, currentSettings);

        // Change 2: Update warning emoji 
        currentSettings = JSON.parse(fs.readFileSync(workspaceSettingsPath, 'utf8'));
        currentSettings = {
            ...currentSettings,
            emojis: {
                ...currentSettings.emojis,
                warning: 'âšª'
            }
        };
        await workspaceService.saveWorkspaceSettings(testWorkspaceDir, currentSettings);

        // Change 3: Add threshold setting
        currentSettings = JSON.parse(fs.readFileSync(workspaceSettingsPath, 'utf8'));
        currentSettings = {
            ...currentSettings,
            lineThresholds: {
                warning: 200
            }
        };
        await workspaceService.saveWorkspaceSettings(testWorkspaceDir, currentSettings);

        // Verify all changes accumulated correctly
        const finalSettings = JSON.parse(fs.readFileSync(workspaceSettingsPath, 'utf8'));
        assert.strictEqual(finalSettings.emojis.normal, 'âš«', 'First change should persist');
        assert.strictEqual(finalSettings.emojis.warning, 'âšª', 'Second change should persist');
        assert.strictEqual(finalSettings.emojis.danger, 'ðŸŸ£', 'Original values should persist');
        assert.strictEqual(finalSettings.lineThresholds.warning, 200, 'Third change should persist');

        // Verify resolved settings reflect final state
        const resolvedSettings = await workspaceService.getResolvedSettings(testWorkspaceDir);
        assert.strictEqual(resolvedSettings.emojis.normal, 'âš«', 'Final resolved normal emoji');
        assert.strictEqual(resolvedSettings.emojis.warning, 'âšª', 'Final resolved warning emoji');
        assert.strictEqual(resolvedSettings.emojis.danger, 'ðŸŸ£', 'Final resolved danger emoji');
        assert.strictEqual(resolvedSettings.lineThresholds.warning, 200, 'Final resolved warning threshold');
    });
});