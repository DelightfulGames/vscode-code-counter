import * as assert from 'assert';
import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs';
import { WorkspaceSettingsService, WorkspaceSettings } from '../../services/workspaceSettingsService';

/**
 * Tests for workspace settings bug where:
 * 1. UI resets after workspace changes
 * 2. Settings are saved to global instead of workspace file
 */
suite('Workspace Settings Bug Tests', () => {
    let workspaceService: WorkspaceSettingsService;
    let testWorkspaceDir: string;
    let originalConfig: any;

    setup(async () => {
        testWorkspaceDir = path.join(__dirname, '..', '..', '..', 'test-workspace-bug');
        workspaceService = new WorkspaceSettingsService(testWorkspaceDir);
        
        // Create test workspace directory
        if (!fs.existsSync(testWorkspaceDir)) {
            fs.mkdirSync(testWorkspaceDir, { recursive: true });
        }

        // Backup original global configuration
        const config = vscode.workspace.getConfiguration('codeCounter');
        originalConfig = {
            'emojis.normal': config.get('emojis.normal'),
            'emojis.warning': config.get('emojis.warning'),
            'emojis.danger': config.get('emojis.danger'),
            'lineThresholds.midThreshold': config.get('lineThresholds.midThreshold'),
            'lineThresholds.highThreshold': config.get('lineThresholds.highThreshold')
        };
    });

    teardown(async () => {
        // Clean up test workspace
        if (fs.existsSync(testWorkspaceDir)) {
            fs.rmSync(testWorkspaceDir, { recursive: true, force: true });
        }

        // Restore original configuration
        const config = vscode.workspace.getConfiguration('codeCounter');
        for (const key of Object.keys(originalConfig)) {
            if (originalConfig[key] !== undefined) {
                await config.update(key, originalConfig[key], vscode.ConfigurationTarget.Global);
            }
        }
    });

    test('should save emoji change to workspace file, not global settings', async () => {
        // Arrange: Create workspace settings file
        const workspaceSettingsPath = path.join(testWorkspaceDir, '.code-counter.json');
        const initialWorkspaceSettings: WorkspaceSettings = {
            'codeCounter.emojis.normal': '🟢',
            'codeCounter.emojis.warning': '🟡',
            'codeCounter.emojis.danger': '🔴'
        };
        
        fs.writeFileSync(workspaceSettingsPath, JSON.stringify(initialWorkspaceSettings, null, 2));

        // Get initial global settings
        const config = vscode.workspace.getConfiguration('codeCounter');
        const initialGlobalEmojis = {
            normal: config.get('emojis.normal'),
            warning: config.get('emojis.warning'),
            danger: config.get('emojis.danger')
        };

        // Act: Simulate updating emoji in workspace mode (low -> normal mapping)
        const updatedSettings: WorkspaceSettings = {
            ...initialWorkspaceSettings,
            emojis: {
                ...initialWorkspaceSettings.emojis!,
                normal: '🔵'
            }
        };
        await workspaceService.saveWorkspaceSettings(testWorkspaceDir, updatedSettings);

        // Assert: Workspace file should be updated
        const updatedWorkspaceSettings = JSON.parse(fs.readFileSync(workspaceSettingsPath, 'utf8'));
        assert.strictEqual(updatedWorkspaceSettings.emojis.normal, '🔵', 'Workspace emoji should be updated');

        // Assert: Global settings should NOT be changed
        const currentConfig = vscode.workspace.getConfiguration('codeCounter');
        const currentGlobalEmojis = {
            normal: currentConfig.get('emojis.normal'),
            warning: currentConfig.get('emojis.warning'),
            danger: currentConfig.get('emojis.danger')
        };
        assert.deepStrictEqual(currentGlobalEmojis, initialGlobalEmojis, 'Global settings should remain unchanged');
    });

    test('should save threshold change to workspace file, not global settings', async () => {
        // Arrange: Create workspace settings file
        const workspaceSettingsPath = path.join(testWorkspaceDir, '.code-counter.json');
        const initialWorkspaceSettings: WorkspaceSettings = {
            lineThresholds: {
                warning: 100,
                danger: 500
            }
        };
        
        fs.writeFileSync(workspaceSettingsPath, JSON.stringify(initialWorkspaceSettings, null, 2));

        // Get initial global settings
        const config = vscode.workspace.getConfiguration('codeCounter');
        const initialGlobalThresholds = {
            warning: config.get('lineThresholds.midThreshold'),
            danger: config.get('lineThresholds.highThreshold')
        };

        // Act: Simulate updating threshold in workspace mode (mid -> warning mapping)
        const updatedSettings: WorkspaceSettings = {
            ...initialWorkspaceSettings,
            lineThresholds: {
                ...initialWorkspaceSettings.lineThresholds!,
                warning: 150
            }
        };
        await workspaceService.saveWorkspaceSettings(testWorkspaceDir, updatedSettings);

        // Assert: Workspace file should be updated
        const updatedWorkspaceSettings = JSON.parse(fs.readFileSync(workspaceSettingsPath, 'utf8'));
        assert.strictEqual(updatedWorkspaceSettings.lineThresholds.warning, 150, 'Workspace threshold should be updated');

        // Assert: Global settings should NOT be changed
        const currentConfig = vscode.workspace.getConfiguration('codeCounter');
        const currentGlobalThresholds = {
            warning: currentConfig.get('lineThresholds.midThreshold'),
            danger: currentConfig.get('lineThresholds.highThreshold')
        };
        assert.deepStrictEqual(currentGlobalThresholds, initialGlobalThresholds, 'Global thresholds should remain unchanged');
    });

    test('should properly resolve workspace settings over global settings', async () => {
        // Arrange: Set up global settings
        const globalConfig = vscode.workspace.getConfiguration('codeCounter');
        await globalConfig.update('emojis.normal', '🟢', vscode.ConfigurationTarget.Global);
        await globalConfig.update('emojis.warning', '🟡', vscode.ConfigurationTarget.Global);
        await globalConfig.update('emojis.danger', '🔴', vscode.ConfigurationTarget.Global);
        await globalConfig.update('lineThresholds.midThreshold', 100, vscode.ConfigurationTarget.Global);
        await globalConfig.update('lineThresholds.highThreshold', 500, vscode.ConfigurationTarget.Global);

        // Create workspace settings that override some values
        const workspaceSettingsPath = path.join(testWorkspaceDir, '.code-counter.json');
        const workspaceSettings: WorkspaceSettings = {
            emojis: {
                normal: '🔵', // Override global
                // warning and danger should inherit from global
            },
            lineThresholds: {
                warning: 150 // Override global
                // danger should inherit from global
            }
        };
        
        fs.writeFileSync(workspaceSettingsPath, JSON.stringify(workspaceSettings, null, 2));

        // Act: Get resolved settings
        const resolvedSettings = await workspaceService.getResolvedSettings(testWorkspaceDir);

        // Assert: Should have workspace overrides with global fallbacks
        assert.strictEqual(resolvedSettings.emojis.normal, '🔵', 'Should use workspace override for normal emoji');
        assert.strictEqual(resolvedSettings.emojis.warning, '🟡', 'Should inherit global value for warning emoji');
        assert.strictEqual(resolvedSettings.emojis.danger, '🔴', 'Should inherit global value for danger emoji');
        assert.strictEqual(resolvedSettings.lineThresholds.warning, 150, 'Should use workspace override for warning threshold');
        assert.strictEqual(resolvedSettings.lineThresholds.danger, 500, 'Should inherit global value for danger threshold');
    });

    test('should maintain workspace context after multiple settings updates', async () => {
        // Arrange: Create workspace settings
        const workspaceSettingsPath = path.join(testWorkspaceDir, '.code-counter.json');
        const initialSettings: WorkspaceSettings = {
            emojis: { normal: '🟢' },
            lineThresholds: { warning: 100 }
        };
        
        fs.writeFileSync(workspaceSettingsPath, JSON.stringify(initialSettings, null, 2));

        // Act: Update multiple settings in sequence
        const firstUpdate: WorkspaceSettings = {
            emojis: { normal: '🔵' },
            lineThresholds: { warning: 100 }
        };
        await workspaceService.saveWorkspaceSettings(testWorkspaceDir, firstUpdate);

        const secondUpdate: WorkspaceSettings = {
            emojis: { normal: '🔵' },
            lineThresholds: { warning: 150 }
        };
        await workspaceService.saveWorkspaceSettings(testWorkspaceDir, secondUpdate);

        // Assert: All changes should be in workspace file
        const finalSettings = JSON.parse(fs.readFileSync(workspaceSettingsPath, 'utf8'));
        assert.strictEqual(finalSettings.emojis.normal, '🔵', 'First change should persist');
        assert.strictEqual(finalSettings.lineThresholds.warning, 150, 'Second change should persist');
    });

    test('should not reset to global values when updating workspace settings', async () => {
        // Arrange: Set different global values
        const globalConfig = vscode.workspace.getConfiguration('codeCounter');
        await globalConfig.update('emojis.normal', '🟢', vscode.ConfigurationTarget.Global);
        await globalConfig.update('emojis.warning', '🟡', vscode.ConfigurationTarget.Global);
        await globalConfig.update('emojis.danger', '🔴', vscode.ConfigurationTarget.Global);

        // Create workspace with different values
        const workspaceSettingsPath = path.join(testWorkspaceDir, '.code-counter.json');
        const workspaceSettings: WorkspaceSettings = {
            emojis: {
                normal: '🔵',
                warning: '🟠',
                danger: '🟣'
            }
        };
        
        fs.writeFileSync(workspaceSettingsPath, JSON.stringify(workspaceSettings, null, 2));

        // Get initial resolved settings
        const initialResolved = await workspaceService.getResolvedSettings(testWorkspaceDir);

        // Act: Update one workspace setting using the service method
        const updatedSettings: WorkspaceSettings = {
            ...workspaceSettings,
            emojis: {
                ...workspaceSettings.emojis!,
                normal: '⚫'
            }
        };
        await workspaceService.saveWorkspaceSettings(testWorkspaceDir, updatedSettings);

        // Get updated resolved settings
        const updatedResolved = await workspaceService.getResolvedSettings(testWorkspaceDir);

        // Assert: Other workspace values should be preserved, not reset to global
        assert.strictEqual(updatedResolved.emojis.normal, '⚫', 'Updated value should be applied');
        assert.strictEqual(updatedResolved.emojis.warning, '🟠', 'Other workspace values should be preserved');
        assert.strictEqual(updatedResolved.emojis.danger, '🟣', 'Other workspace values should be preserved');
        assert.notStrictEqual(updatedResolved.emojis.warning, '🟡', 'Should not revert to global values');
    });

    test('should properly preserve existing workspace settings when updating single fields', async () => {
        // Arrange: Create workspace with multiple settings
        const workspaceSettingsPath = path.join(testWorkspaceDir, '.code-counter.json');
        const workspaceSettings: WorkspaceSettings = {
            emojis: {
                normal: '🔵',
                warning: '🟠'
            },
            lineThresholds: {
                warning: 150,
                danger: 600
            }
        };
        
        fs.writeFileSync(workspaceSettingsPath, JSON.stringify(workspaceSettings, null, 2));

        // Act: Update only one field using the pattern from extension.ts
        const existingSettings = JSON.parse(fs.readFileSync(workspaceSettingsPath, 'utf8'));
        const updatedSettings: WorkspaceSettings = {
            ...existingSettings,
            emojis: {
                ...existingSettings.emojis,
                normal: '⚫'
            }
        };
        await workspaceService.saveWorkspaceSettings(testWorkspaceDir, updatedSettings);

        // Assert: Other properties should remain intact
        const finalSettings = JSON.parse(fs.readFileSync(workspaceSettingsPath, 'utf8'));
        
        // Check that the updated property changed
        assert.strictEqual(finalSettings.emojis.normal, '⚫', 'Updated property should change');
        
        // Check that other properties are preserved
        assert.strictEqual(finalSettings.emojis.warning, '🟠', 'Other emoji should be preserved');
        assert.deepStrictEqual(finalSettings.lineThresholds, workspaceSettings.lineThresholds, 'Thresholds should be preserved');
    });
});